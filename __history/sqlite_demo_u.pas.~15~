unit sqlite_demo_u;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.SQLite,
  FireDAC.Phys.SQLiteDef, FireDAC.Stan.ExprFuncs, FireDAC.VCLUI.Wait,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.Phys.SQLiteWrapper.Stat, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, Vcl.Grids, Vcl.DBGrids, Vcl.StdCtrls;

type
  TSqlit_Demo = class(TForm)
    FDConSqlite: TFDConnection;
    FDQSqlite: TFDQuery;
    FDPhysSQLiteDriverLink1: TFDPhysSQLiteDriverLink;
    DataSourceSqlite: TDataSource;
    btnInsert: TButton;
    edtName: TEdit;
    edtEmail: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure btnInsertClick(Sender: TObject);
  private
    { Private declarations }
  public
    procedure ExecuteQuery;
    { Public declarations }
  end;

var
  Sqlit_Demo: TSqlit_Demo;

implementation

{$R *.dfm}



// Open Connection
procedure TSqlit_Demo.FormCreate(Sender: TObject);
begin
  FDConSqlite.Connected := True;
end;

// Execute SQL Queries
procedure TSqlit_Demo.btnInsertClick(Sender: TObject);
begin
  // Assuming Edit1 contains the name and Edit2 contains the email
  FDQSqlite.Close;
  FDQSqlite.SQL.Text := 'INSERT INTO Users (name, email) VALUES (:name, :email)';
  FDQSqlite.Params.ParamByName('name').AsString := edtName.Text;
  FDQSqlite.Params.ParamByName('email').AsString := edtEmail.Text;

  FDQSqlite.Open;
  try
    FDQSqlite.ExecSQL;
    ShowMessage('Data inserted successfully.');
  except
    on E: Exception do
      ShowMessage('Error: ' + E.Message);
  end;

  FDQSqlite.Close;
  FDQSqlite.SQL.Text := 'SELECT * From Users';

  FDQSqlite.Open;
  try
    FDQSqlite.ExecSQL;
    ShowMessage('Data inserted successfully.');
  except
    on E: Exception do
      ShowMessage('Error: ' + E.Message);
  end;


end;

procedure TSqlit_Demo.ExecuteQuery;
begin
//
end;




end.
