unit sqlite_demo_u;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.SQLite,
  FireDAC.Phys.SQLiteDef, FireDAC.Stan.ExprFuncs, FireDAC.VCLUI.Wait,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.Phys.SQLiteWrapper.Stat, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, Vcl.Grids, Vcl.DBGrids, Vcl.StdCtrls;

type
  TSqlit_Demo = class(TForm)
    FDConSqlite: TFDConnection;
    FDQSqlite: TFDQuery;
    FDPhysSQLiteDriverLink1: TFDPhysSQLiteDriverLink;
    DataSourceSqlite: TDataSource;
    btnInsert: TButton;
    edtName: TEdit;
    edtEmail: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    DBGrid1: TDBGrid;
    btnDelete: TButton;
    Button1: TButton;
    btnUpdate: TButton;
    procedure FormCreate(Sender: TObject);
    procedure btnInsertClick(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure btnUpdateClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Sqlit_Demo: TSqlit_Demo;

implementation

{$R *.dfm}

// Open Connection
procedure TSqlit_Demo.FormCreate(Sender: TObject);
begin
//  FDConSqlite.Connected := True;
  FDQSqlite.Open('SELECT * FROM Users');
end;

// Execute SQL Queries --> Delete record
procedure TSqlit_Demo.btnDeleteClick(Sender: TObject);
var
  SelectedID: Integer;
begin
  if not FDQSqlite.IsEmpty then
  begin
    SelectedID := FDQSqlite.FieldByName('name').AsInteger;
    FDQSqlite.Delete;

    try
      FDQSqlite.SQL.Text := 'DELETE FROM Users WHERE name = :ID';
      FDQSqlite.ParamByName('ID').AsInteger := SelectedID;
      FDQSqlite.ExecSQL;
    except
      on E: Exception do
        ShowMessage('Error: ' + E.Message);
    end;
  end
  else begin
    ShowMessage('No records to delete.');
  end;
  // Refresh The Table
  FDQSqlite.Open('SELECT * FROM Users');
end;

// Execute SQL Queries --> Insert record
procedure TSqlit_Demo.btnInsertClick(Sender: TObject);
begin
  FDQSqlite.Close;
  FDQSqlite.SQL.Text := 'INSERT INTO Users (name, email) VALUES (:name, :email)';
  FDQSqlite.Params.ParamByName('name').AsString := edtName.Text;
  FDQSqlite.Params.ParamByName('email').AsString := edtEmail.Text;

  try
    FDQSqlite.ExecSQL;
//    ShowMessage('Data inserted successfully.');
  except
    on E: Exception do
      ShowMessage('Error: ' + E.Message);
  end;
  // Delete the values
  edtName.Text := '';
  edtEmail.Text := '';

  // Refresh The Table
  FDQSqlite.Open('SELECT * FROM Users');
end;

procedure TSqlit_Demo.btnUpdateClick(Sender: TObject);
begin
  if not FDQSqlite.IsEmpty then
  begin
    try
      FDQSqlite.Edit;

      // Assuming Edit1 and Edit2 are your data-aware controls for name and email
      FDQSqlite.FieldByName('name').AsString := edtName.Text;
      FDQSqlite.FieldByName('email').AsString := edtEmail.Text;

      FDQSqlite.Post;

      FDQSqlite.SQL.Text := 'UPDATE Users SET name = :name, email = :email WHERE ID = :ID';
      FDQSqlite.ExecSQL;
      ShowMessage('Record updated successfully.');
    except
      on E: Exception do
      begin
        FDQSqlite.Cancel; // Cancel changes if an error occurs
        ShowMessage('Error: ' + E.Message);
      end;
    end;
  end
  else
    ShowMessage('No records to update.');

  // Refresh The Table
  FDQSqlite.Open('SELECT * FROM Users');
end;

end.
